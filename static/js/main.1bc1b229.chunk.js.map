{"version":3,"sources":["components/EditableField.jsx","components/TaskItem.jsx","components/TaskForm.jsx","components/TodoList.jsx","StorageService.js","App.jsx","reportWebVitals.js","index.js"],"names":["EditableField","props","useState","editMode","setEditMode","value","input","useRef","finishEdit","onValueChange","current","type","defaultValue","ref","onBlur","onKeyDown","event","key","title","className","onClick","prevMode","TaskItem","task","isDone","defaultChecked","onChange","onUpdate","text","onRemove","TaskForm","action","onSubmit","preventDefault","newTaskTitle","trim","onAddTask","placeholder","TodoList","todolist","setTodolist","updateTask","initialTask","updates","pos","tasks","indexOf","taskUpdate","splice","removeTask","useEffect","nbDone","filter","length","newTitle","onSup","push","id","nanoid","map","index","STORAGE_KEY","StorageService","save","data","window","localStorage","setItem","JSON","stringify","load","parse","getItem","App","lists","setLists","saveList","updatedTodolist","findIndex","list","MaFonction","tbLASupprimer","position","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1bc1b229.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { useState, useRef } from \"react\";\r\n\r\nconst EditableField = (props) => {\r\n    const [editMode, setEditMode] = useState(props.editMode);\r\n    const value = props.value;\r\n\r\n    const input = useRef();\r\n\r\n    function onEdit() {\r\n        setEditMode((prevMode) => !prevMode);\r\n    }\r\n\r\n    function finishEdit() {\r\n        setEditMode(false);\r\n        props.onValueChange(input.current.value);\r\n    }\r\n\r\n    function onKeyDown(event) {\r\n        if (event.key === \"Entrer\") {\r\n            finishEdit();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {editMode ? <input type=\"text\" defaultValue={value} ref={input} onBlur={finishEdit} onKeyDown={onKeyDown} /> : value}\r\n\r\n            <button title=\"Modifier\" className=\"button-icon\" onClick={onEdit}>\r\n                {!editMode ? \"✏\" : \"✔\"}\r\n            </button>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default EditableField;\r\n","import React, { Component } from \"react\";\r\nimport EditableField from \"./EditableField\";\r\n\r\nconst TaskItem = (props) => {\r\n    const { title, isDone } = props.task;\r\n\r\n    function onCheck() {\r\n        props.onUpdate(props.task, { isDone: !isDone });\r\n    }\r\n\r\n    function onRemove() {\r\n        props.onRemove(props.task);\r\n    }\r\n\r\n    function onValueChange(text) {\r\n        props.onUpdate(props.task, { title: text });\r\n    }\r\n\r\n    return (\r\n        <li>\r\n            <label>\r\n                <input type=\"checkbox\" defaultChecked={isDone} onChange={onCheck} />\r\n                <EditableField value={title} editMode={false} onValueChange={onValueChange} />\r\n                <button title=\"Supprimer\" className=\"button-icon\" onClick={onRemove}>\r\n                    ❌\r\n                </button>\r\n            </label>\r\n        </li>\r\n    );\r\n};\r\n\r\nexport default TaskItem;\r\n","import React from \"react\";\r\nimport { useRef } from \"react\";\r\n\r\nconst TaskForm = (props) => {\r\n    const input = useRef();\r\n\r\n    function onFormSubmit(event) {\r\n        event.preventDefault(); //empeche le chargemebt de la page\r\n\r\n        let newTaskTitle = input.current.value.trim(); // creer la variable permettant de recuperer les donnée dans l'input\r\n\r\n        if (newTaskTitle === \"\") return; //trim permet de delete les espaces\r\n\r\n        //creation de l'evenment\r\n        props.onAddTask(newTaskTitle);\r\n\r\n        input.current.value = \"\";\r\n    }\r\n\r\n    return (\r\n        <div className=\"input\">\r\n            <form action=\"#\" onSubmit={onFormSubmit}>\r\n                <input type=\"text\" placeholder=\"nouvelle tache\" ref={input} className=\"button\" />\r\n                <span className=\"Ajou\">\r\n                    <button type=\"submit\" className=\"Ajouter\">\r\n                        Ajouter\r\n                    </button>\r\n                </span>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TaskForm;\r\n","import { useState, useRef, StyleSheet, useEffect } from \"react\";\r\nimport TaskItem from \"./TaskItem\";\r\nimport TaskForm from \"./TaskForm\";\r\nimport { nanoid } from \"nanoid\";\r\nimport EditableField from \"./EditableField\";\r\n\r\nfunction TodoList(props) {\r\n    const [todolist, setTodolist] = useState(props.todolist);\r\n\r\n    useEffect(() => {\r\n        props.onChange(todolist);\r\n    }, [todolist, props]);\r\n\r\n    function changeListTitle(newTitle) {\r\n        todolist.title = newTitle;\r\n        setTodolist({ ...todolist });\r\n    }\r\n\r\n    function updateTask(initialTask, updates) {\r\n        let pos = todolist.tasks.indexOf(initialTask);\r\n        if (pos > -1) {\r\n            let taskUpdate = { ...initialTask, ...updates };\r\n            todolist.tasks.splice(pos, 1, taskUpdate);\r\n            setTodolist({ ...todolist });\r\n        }\r\n    }\r\n\r\n    // function onCheck(task) {\r\n    //     task.isDone = !task.isDone;\r\n    //     setTasks([...tasks]);\r\n    // }\r\n\r\n    function onAddTask(title) {\r\n        todolist.tasks.push({\r\n            id: nanoid(),\r\n            title: title,\r\n            isDone: false,\r\n        });\r\n\r\n        setTodolist({ ...todolist });\r\n    }\r\n\r\n    function removeTask(task) {\r\n        let pos = todolist.tasks.indexOf(task);\r\n        if (pos > -1) {\r\n            todolist.tasks.splice(pos, 1); //Supprime l'élément à la position \"pas\" du tableau\r\n            setTodolist({ ...todolist });\r\n        }\r\n    }\r\n\r\n    function onSup() {\r\n        props.onSup(todolist);\r\n    }\r\n\r\n    const nbDone = todolist.tasks.filter((task) => task.isDone === true).length;\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"TodoApp\">\r\n                <h1>\r\n                    <EditableField value={todolist.title} editMode={false} onValueChange={changeListTitle} />\r\n                </h1>\r\n                <button title=\"Supprimer cette liste\" className=\"button-icon\" onClick={onSup}>\r\n                    ❌\r\n                </button>\r\n                <TaskForm onAddTask={onAddTask} />\r\n                <p className=\"ecritureee\">\r\n                    {nbDone}/{todolist.tasks.length} effectuer\r\n                </p>\r\n                <ul>\r\n                    {todolist.tasks.map((task, index) => (\r\n                        <TaskItem key={task.id} task={task} onUpdate={updateTask} onRemove={removeTask} />\r\n                    ))}\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoList;\r\n","const STORAGE_KEY = \"todolist\";\r\n\r\nconst StorageService = {\r\n    save(data = []) {\r\n        window.localStorage.setItem(STORAGE_KEY, JSON.stringify(data));\r\n    },\r\n    load() {\r\n        return JSON.parse(window.localStorage.getItem(STORAGE_KEY)) || [];\r\n    },\r\n};\r\n\r\nexport default StorageService;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { nanoid } from \"nanoid\";\r\n\r\n// import \"\";\r\n\r\nimport TodoList from \"./components/TodoList\";\r\nimport StorageService from \"./StorageService\";\r\n\r\nconst App = () => {\r\n    const [lists, setLists] = useState([]);\r\n\r\n    //FONCTION QUI SERA D2CLENCHER AU CHARGEMENT DU COMPOSANT\r\n    useEffect(() => {\r\n        //RECUPERATION DES DONNEES SAUVEGARDER\r\n        const data = StorageService.load();\r\n        setLists([...data]);\r\n    }, []);\r\n\r\n    function addList() {}\r\n\r\n    function saveList(updatedTodolist) {\r\n        let pos = lists.findIndex((list) => list.id === updatedTodolist.id);\r\n        if (pos > -1) {\r\n            lists.splice(pos, 1, updatedTodolist);\r\n            StorageService.save(lists);\r\n        }\r\n    }\r\n\r\n    function addList() {\r\n        lists.push({\r\n            id: nanoid(),\r\n            title: \"Nouvelle liste …\",\r\n            tasks: [],\r\n        });\r\n        setLists([...lists]);\r\n    }\r\n\r\n    function MaFonction(tbLASupprimer) {\r\n        let position = lists.findIndex((list) => list.id === tbLASupprimer.id);\r\n        if (position > -1) {\r\n            lists.splice(position, 1);\r\n            setLists([...lists]);\r\n        } else {\r\n            console.log(position, tbLASupprimer);\r\n        }\r\n\r\n        // donner au composant parent d'utiliser la fonction MaFonction\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1>TODO LIST</h1>\r\n            <div className=\"Ajou\">\r\n                <button className=\"buttonAdd\" onClick={addList}>\r\n                    ➕ Ajouter une nouvelle liste\r\n                </button>\r\n            </div>\r\n            {lists.map((todolist) => (\r\n                <TodoList onChange={saveList} key={todolist.id} todolist={todolist} onSup={MaFonction} />\r\n            ))}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}